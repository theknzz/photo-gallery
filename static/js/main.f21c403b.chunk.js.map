{"version":3,"sources":["context/PhotoContext.js","api/config.js","components/Header.js","components/Searcher.js","components/Photo.js","components/Loader.js","components/Results.js","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["PhotoContext","createContext","PhotoContextProvider","props","useState","images","setImages","loading","setLoading","Provider","value","runSearch","query","url","trim","replace","fetch","then","response","json","res","imgs","hits","map","item","imageURL","id","pageURL","catch","error","console","children","Container","styled","div","Header","href","Searcher","input","setInput","onSubmit","e","preventDefault","onSearch","className","onChange","target","placeholder","type","disabled","Card","Image","Photo","on","src","Spin","Loader","Wrapper","Results","previousQuery","useContext","useEffect","current","img","key","content","Gallery","search","setSearch","useRef","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f21c403b.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\nimport { apiKey } from \"../api/config\";\nexport const PhotoContext = createContext();\n\nconst PhotoContextProvider = props => {\n\n    const [images, setImages] = useState([ ]);\n    const [loading, setLoading] = useState(true);\n\n    const runSearch = query => {\n        let url = query.trim().replace(' ', '+');\n        if ( !url ) url='skate';\n        fetch(`https://pixabay.com/api/?key=${apiKey}&q=${url}&image_type=photo`)\n            .then( response => {\n                response.json().then( res => {\n                    let imgs = res.hits.map(item => {\n                        return {\n                            url: item.imageURL,\n                            id: item.id,\n                            pageURL: item.pageURL,\n                        };\n                    });\n                    setImages(imgs);\n                    setLoading(false);\n                });\n            })\n            .catch( error => console.error('Encountered an error with fetching and parsing data', error));\n    }\n\n    return (\n        <PhotoContext.Provider value={ { images, loading, runSearch, setLoading}}>\n            { props.children }\n        </PhotoContext.Provider>\n    );\n}\n\nexport default PhotoContextProvider;","export const apiKey = '18823214-2ec27e8c0b48c79d6e29044e0';","import React from 'react'\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    > h1 {\n        font-size: 100px;\n        margin-bottom: 15px;\n        font-family: 'Patrick Hand SC', cursive;\n    }\n    > span {\n        font-size: 15px;\n        margin-bottom: 50px;\n    }\n    @media (max-width: 768px) {\n        > h1 {\n            font-size: 60px;\n        }\n    }\n`\n\nconst Header = (props) => {\n    return (\n        <Container>\n            <h1>My Gallery</h1>\n            <span>Based in Github repo <a href={'https://github.com/Yog9/SnapShot'}>link</a></span>\n        </Container>\n    );\n}\n\nexport default Header","import React, { useState } from 'react'\nimport styled from \"@emotion/styled\";\n\n\nconst Container = styled.div`\n    > form {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n    > form > button {\n        font-size: 1.2rem;\n        border: none;\n        background-color: white;\n        border: 2px solid #ddd;\n        border-left: none;\n    }\n    > form > button: disabled {\n        opacity: 25%;\n    }\n    .input {\n        width: 40%;\n        padding: 15px;\n        font-size: 0.7rem;\n        border: 2px solid #ddd;\n        border-right: none;\n    }\n    .input: focus {\n        outline: none;\n    }\n    @media (max-width: 768px) {\n        .input {\n            width: 60%;\n            padding: 15px;\n            font-size: 0.7rem;\n        }\n    }\n`\n\n\nconst Searcher = (props) => {\n    const [input, setInput] = useState('');\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.onSearch(input);\n        setInput('');\n    }\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    return (\n        <Container>\n            <form onSubmit={handleSubmit}>\n                <input className={'input'} onChange={handleChange} value={input} placeholder={'Insert your photo keyword...'} type={'text'} />\n                <button disabled={input===''}>🔎</button>\n            </form>\n        </Container>\n    );\n}\n\nexport default Searcher;\n","import React from 'react'\nimport styled from \"@emotion/styled\";\n\nconst Card = styled.div`\n    margin: 10px;\n    width: 290px;\n`\n\nconst Image = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    > img {\n        width: 100%;\n        border-radius: 5px;\n        height: auto;\n    }\n    > img:hover {\n        transform: scale(1.25);\n        transition transform 1.0s;;\n    }\n    height:100%;\n    background-color: white;\n`\n\n\nconst Photo = ({ url, pageURL }) => {\n    return (\n        <Card>\n            <Image>\n                <img on src={url}/>\n            </Image>\n        </Card>\n    );\n}\n\nexport default Photo","import React from 'react'\nimport styled from \"@emotion/styled\";\n\n\nconst Spin = styled.div`\n  border: 16px solid #f3f3f3;\n  /* Light grey */\n  border-top: 16px solid #051c33;\n  /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 1.5s linear infinite;\n  margin-left: auto;\n  margin-right: auto;\n  \n  @keyframes spin {\n      0% {\n        transform: rotate(0deg);\n      }\n    \n      100% {\n        transform: rotate(360deg);\n      }\n  }\n`\n\nconst Loader = () => {\n    return (\n        <Spin />\n    );\n}\n\nexport default Loader;","import React, { useContext, useEffect } from 'react'\nimport Photo from \"./Photo\";\nimport styled from \"@emotion/styled\";\nimport { PhotoContext } from \"../context/PhotoContext\";\nimport Loader from \"./Loader\";\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 100px;\n`\n\nconst Wrapper = styled.div`\n    width: 80%;\n    display:flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    transition: 1s;\n`\n\nconst Results = ( {query, previousQuery} ) => {\n    // eslint-disable-next-line no-undef\n    const { images, loading, runSearch } = useContext(PhotoContext);\n\n    useEffect( () => {\n        if (previousQuery !== query) {\n            previousQuery.current = query;\n            runSearch(query);\n        }\n    }, [query]);\n\n    const imgs = images.map( img => {\n        return <Photo key={img.id} url={img.url} pageURL={img.pageURL}/>;\n    });\n\n    const content = loading ? <Loader/> : imgs;\n\n    return (\n        <Container>\n            <Wrapper>\n                { content }\n            </Wrapper>\n        </Container>\n    );\n}\n\nexport default Results","import React, {Fragment, useRef, useState} from 'react'\nimport Header from \"./Header\";\nimport Searcher from \"./Searcher\";\nimport Results from \"./Results\";\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\n\nconst Gallery = (props) => {\n\n    const [search, setSearch] = useState('');\n    const previousQuery = useRef(search);\n\n    const handleSearchChange = (search) => {\n        setSearch(search);\n    }\n\n    return (\n        <Fragment>\n            <Header />\n            <Searcher onSearch={handleSearchChange}/>\n            <Results query={search} previousQuery={previousQuery}/>\n        </Fragment>\n    );\n}\n\nexport default Gallery;","import React from 'react';\nimport PhotoContextProvider from \"./context/PhotoContext\";\nimport Gallery from \"./components/Gallery\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nfunction App() {\n  return (\n          <PhotoContextProvider>\n            <Gallery/>\n          </PhotoContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}